daira@katava:~/research/tweedle$ sage
┌────────────────────────────────────────────────────────────────────┐
│ SageMath version 8.6, Release Date: 2019-01-15                     │
│ Using Python 2.7.16. Type "help()" for help.                       │
└────────────────────────────────────────────────────────────────────┘
sage: def p_(u): return 343*u^6 + 37*u^3 + 1
sage: [k for k = range(100) if is_prime(p_(1<<k))]
  File "<ipython-input-2-9b54ecfdd681>", line 1
    [k for k = range(Integer(100)) if is_prime(p_(Integer(1)<<k))]
             ^
SyntaxError: invalid syntax

sage: [k for k in range(100) if is_prime(p_(1<<k))]
[9, 33, 45]
sage: u = 1<<33
sage: p = p_(u)
sage: p
137794937295208416127723249418278144702383128960802174636392449
sage: format(p,'b')
'101010111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
sage: E = EllipticCurve(GF(p), [0, 5])
sage: q = E.count_points()
sage: q = int(q)
sage: format(q, 'b')
'101010111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
sage: is_prime(p)
True
sage: t = p+1-q
sage: format(t,'b')
'10001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
sage: format(u,'b')
'1000000000000000000000000000000000'
sage: format(u^3,'b')
'1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
sage: 0b10001
17
sage: format(17*u^3,'b')
'10001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
sage: format(t,'b')
'10001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
sage: format(17*u^3 + 1,'b')
'10001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
sage: T = t
sage: #DV2 = 4*p - T^2
sage: DV2 = 4*p - T^2
sage: DV2.squarefree_part()
3
sage: D = 3
sage: V2 = DV2/D
sage: V2.is_square()
True
sage: V = sqrt(V2)
sage: V = int(V)
sage: format(V, 'b')
'10011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
sage: 0b10011
19
sage: format(19*u^3 + 1,'b')
'10011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'
sage: assert T == 17*u^3 + 1
sage: assert V == 19*u^3 + 1
sage:                                                                                                                    
Exiting Sage (CPU time 0m3.12s, Wall time 10m29.67s).
daira@katava:~/research/tweedle$ gp
Reading GPRC: /etc/gprc ...Done.

                                      GP/PARI CALCULATOR Version 2.11.1 (released)
                              amd64 running linux (x86-64/GMP-6.1.2 kernel) 64-bit version
                               compiled: Jan 25 2019, gcc version 8.2.0 (Debian 8.2.0-14)
                                                threading engine: pthread
                                     (readline v7.0 enabled, extended help enabled)

                                         Copyright (C) 2000-2018 The PARI Group

PARI/GP is free software, covered by the GNU General Public License, and comes WITHOUT ANY WARRANTY WHATSOEVER.

Type ? for help, \q to quit.
Type ?17 for how to get moral (and possibly technical) support.

parisize = 8000000, primelimit = 500000, nbthreads = 12
? p(u) = 343*u^6 + 37*u^3 + 1
%1 = (u)->343*u^6+37*u^3+1
? V(u) = 19*u^3 + 1
%2 = (u)->19*u^3+1
? T(u) = 17*u^3 + 1
%3 = (u)->17*u^3+1
? 4*p(u) - T(u)^2
%4 = 1083*u^6 + 114*u^3 + 3
? 3*V(u)^2
%5 = 1083*u^6 + 114*u^3 + 3
? 
Goodbye!
